export default {
  'zh-cn': {},
  'en-us': {
    '语言': 'lang',
    '事件': 'Event',
    '方法': 'Method',
    '静态方法': 'Static Method',
    '接收参数': 'Recieve params',
    '当前弹窗实例': 'Current dialog instance',
    '支持ie > 9，现代浏览器': 'Support ie > 9, mordern browsers',
    '未命名标题': 'Untitled',
    '取消': 'Cancel',
    '确定': 'Confirm',
    '还原': 'Restore',
    '最大化': 'Maximize',
    '关闭': 'Close',
    '未设置': 'Not Set',
    '设置了标题': 'Title Setted',
    '类型': 'Type',
    '默认值': 'Default',
    '默认': 'Default',
    '可选值': 'Optional',
    '备注': 'Remark',
    '调用实例方法': 'With Method',
    '点击确定按钮': 'Click the Confirm Button',
    '安装': 'Install',
    '示例': 'Example',
    '用法': 'Usage',
    '显示': 'Show',
    '关闭': 'Close',
    '加载中': 'Loading',
    '稍等一会': 'Wait a moment',
    '发送至服务器': 'Post to server',
    '改变弹窗大小': 'Resize the dialog',
    '更多弹窗': 'More Dialog',
    '拖曳头部区域': 'Try to drag the header',
    '试试移动底部': 'Try to move the footer area',
    '自定义': 'Customize',
    '其实就是.vue-h-dialog__drag-area的样式': 'the truth is the styles of the ".vue-h-dialog__drag-area" element',
    '弹窗是否可超出可视区域': 'Whether the dialog can exceed the visible area',
    '是否关闭弹窗': 'Whether the dialog can be closed',
    '初始为最大化': 'Init as the maximize',
    '点击关闭按钮': 'Click the close button',
    '点击取消按钮': 'Click the cancel button',
    '点击确认按钮': 'Click the confirm button',
    '可以关闭弹窗': 'Can close the dialog',
    '不可以关闭弹窗': 'Can not close the dialog',
    '不会关闭弹窗': 'Will not close the dialog',
    '会关闭弹窗': 'Will close the dialog',
    '延时关闭弹窗': 'Delay close the dialog',
    '使用Promise': 'Use Promise',
    '延时': 'Delay',
    '如果是HTMLElement类型，弹窗默认挂载到此元素的父级元素(如果有)下，指定appendToBody可以使弹窗挂载至body节点下': 'If received a HTMLElement type, the dialog default mount to this element\'s parentNode(if exist), assign the "appendToBody" field can make dialog mount to the body node',
    '在弹窗中旅行': 'Travel in dialogs',
    '挂载VueComponents': 'Mount VueComponents',
    '模板字符串，可选': 'template string, optional',
    '当指定了template时，绑定数据和事件应该这样使用': 'if template field designated, bind data and listeners should like',
    '组键名没有指定时使用component-index作为组键名': 'if component not named, use "component-index" as the component name',
    '组件对象，必需。可使用诸如import("xxx")返回一个promise对象': 'the vue component, required. Also can use import("xxx/path/to") to load a async component',
    '组件名，可选': 'component name, optional',
    'getComponents()方法会返回注入的VueComponents实例列表': 'getComponents() will return a list of injected vueComponent instances',
    '为什么需要context': 'Why needs the call context',
    '缓存唯一标识id': 'the unique cache id',
    '使用缓存特性需要同时传入pId, cache, context字段': 'To use cache feature, you need pass (pId, cache, context) in the same time',
    '这是因为在单页面路由情况下，路由切换后再回到先前的路由，宿主上下文环境已经发生了变化，所以我们需要在beforeDestroy钩子函数中销毁缓存。': 'In case of SPA, when we pushed to another route and then back to the original, actually the context of hoster has changed, so we need to destroy the cached dialog components in the beforeDestroy hook.',
    '这个特性只限制使用函数调用': 'This feature use with function call only',
    '再次打开弹窗，这条消息将不会出现，因为HelloWorld组件被缓存了': 'Reopen this dialog, this message will not show, because the HelloWorld component has been cached',
    '清除指定的缓存': 'clear assigned cache',
    '清除所有': 'clear all',
    '清除缓存': 'Clear cache',
    '点击我': 'Click me',
    '底部按钮': 'Footer buttons',
    '默认会每次更新okHandler, cancelHandler, closeHandler, scrollHandler': 'Default to update okHandler, cancelHandler, closeHandler, scrollHandler everytime',
    '返回Promise链': 'Returns a Promise chain',
    '获取注入的VueComponent列表': 'Get the list of injected VueComponents',
    '关闭所有': 'Close all',
    '自定义按钮': 'Customisze buttons',
  },
};
